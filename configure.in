AC_INIT(nautilus, 2.11.1,
        [http://bugzilla.gnome.org/enter_bug.cgi?product=nautilus])

m4_version_prereq([2.59])

m4_define([art_minver],                  [2.3.10])
m4_define([bonobo_activation_minver],    [2.1.0])
m4_define([bonobo_minver],               [2.1.0])
m4_define([eel_minver],                  [2.10.1])
m4_define([glib_minver],                 [2.6.0])
m4_define([gnome_desktop_minver],        [2.9.91])
m4_define([gnome_minver],                [2.1.1])
m4_define([gnome_ui_minver],             [2.6.0])
m4_define([gnome_vfs_minver],            [2.9.1])
m4_define([orbit_minver],                [2.4.0])
m4_define([pango_minver],                [1.1.2])
m4_define([gtk_minver],                  [2.6.0])
m4_define([rsvg_minver],                 [2.0.1])
m4_define([xml_minver],                  [2.4.7])
m4_define([startup_notification_minver], [0.5])
m4_define([exif_minver],                 [0.5.12])


AC_CONFIG_SRCDIR(src)
AC_CONFIG_HEADERS(config.h)

AM_INIT_AUTOMAKE
AM_MAINTAINER_MODE
AC_SUBST([ACLOCAL_AMFLAGS], ["\${ACLOCAL_FLAGS}"])

AC_SUBST(ART_REQUIRED, [art_minver])
AC_SUBST(BONOBO_ACTIVATION_REQUIRED, [bonobo_activation_minver])
AC_SUBST(BONOBO_REQUIRED, [bonobo_minver])
AC_SUBST(EEL_REQUIRED, [eel_minver])
AC_SUBST(GLIB_REQUIRED, [glib_minver])
AC_SUBST(GNOME_DESKTOP_REQUIRED, [gnome_desktop_minver])
AC_SUBST(GNOME_REQUIRED, [gnome_minver])
AC_SUBST(GNOME_UI_REQUIRED, [gnome_ui_minver])
AC_SUBST(GNOME_VFS_REQUIRED, [gnome_vfs_minver])
AC_SUBST(ORBIT_REQUIRED, [orbit_minver])
AC_SUBST(PANGO_REQUIRED, [pango_minver])
AC_SUBST(GTK_REQUIRED, [gtk_minver])
AC_SUBST(RSVG_REQUIRED, [rsvg_minver])
AC_SUBST(XML_REQUIRED, [xml_minver])
AC_SUBST(STARTUP_NOTIFICATION_REQUIRED, [startup_notification_minver])


AC_C_BIGENDIAN
AC_C_CONST
AC_ISC_POSIX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AM_DISABLE_STATIC
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)

if $PKG_CONFIG --atleast-version $STARTUP_NOTIFICATION_REQUIRED libstartup-notification-1.0; then
  echo "Building with libstartup-notification"
  AC_DEFINE(HAVE_STARTUP_NOTIFICATION, 1,
            [define to enable startup notification support])
  with_startup_notification=yes
  STARTUP_NOTIFICATION_PACKAGE=libstartup-notification-1.0
  EXTRA_CORE_MODULES="$EXTRA_CORE_MODULES libstartup-notification-1.0"
else
  echo "***** WARNING: Building without libstartup-notification"
  with_startup_notification=no
  STARTUP_NOTIFICATION_PACKAGE=
fi

AC_SUBST(STARTUP_NOTIFICATION_PACKAGE)

PKG_CHECK_MODULES(ALL,
 [bonobo-activation-2.0 >= $BONOBO_ACTIVATION_REQUIRED
  eel-2.0 >= $EEL_REQUIRED
  glib-2.0 >= $GLIB_REQUIRED
  gnome-desktop-2.0 >= $GNOME_DESKTOP_REQUIRED
  gnome-vfs-2.0 >= $GNOME_VFS_REQUIRED
  ORBit-2.0 >= $ORBIT_REQUIRED
  pango >= $PANGO_REQUIRED
  gtk+-2.0 >= $GTK_REQUIRED
  libart-2.0 >= $ART_REQUIRED
  libbonobo-2.0 >= $BONOBO_REQUIRED
  libgnome-2.0 >= $GNOME_REQUIRED
  libgnomeui-2.0 >= $GNOME_UI_REQUIRED
  librsvg-2.0 >= $RSVG_REQUIRED
  libxml-2.0 >= $XML_REQUIRED
  $STARTUP_NOTIFICATION_PACKAGE])


ALL_LINGUAS="af am ar az be bg bn bs ca cs cy da de el en_CA en_GB es et eu fa fi fr ga gl gu he hi hr hu id is it ja ko li lt lv mi mk ml mn ms nb ne nl nn no nso pa pl pt pt_BR ro ru rw sk sl sq sr sr@Latn sr@ije sv ta th tk tr uk vi wa xh yi zh_CN zh_TW zu"

GETTEXT_PACKAGE=nautilus
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE",
                   [the gettext translation domain])

AM_GLIB_GNU_GETTEXT
GLIB_DEFINE_LOCALEDIR(GNOMELOCALEDIR)

AC_PROG_INTLTOOL



ENABLE_PROFILER=
AC_ARG_ENABLE(profiler,
 AC_HELP_STRING([--enable-profiler], [Enable profiler]),
 [ENABLE_PROFILER=1
  AC_DEFINE(ENABLE_PROFILER, 1, [define to enable the profiler])])

profiling_support=off
if test "x$ENABLE_PROFILER" = "x1"
then
	CFLAGS="-g -O -gdwarf-2 -finstrument-functions -D__NO_STRING_INLINES $CFLAGS"
	LDFLAGS="/gnome/GNOME2/lib/libprofiler.so -lpthread $LDFLAGS"
	profiling_support=on
fi

AC_SUBST(ENABLE_PROFILER)
AM_CONDITIONAL(ENABLE_PROFILER, test "x$ENABLE_PROFILER" = "x1")



    
AC_CHECK_LIB(popt, poptGetArg, POPT_LIBS=-lpopt,
        [AC_CHECK_HEADER(popt.h, , AC_MSG_ERROR([[
*** Couldn't find popt. Please download and install from
*** ftp://ftp.rpm.org/pub/rpm/dist/rpm-4.0.x/ and try again.]]))])
AC_SUBST(POPT_LIBS)
	


AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)



ORBIT_IDL="`$PKG_CONFIG --variable=orbit_idl ORBit-2.0`"
AC_SUBST(ORBIT_IDL)



AC_CHECK_FUNCS(setmntent endmntent hasmntopt getmntinfo)
AC_CHECK_HEADERS(mntent.h sys/mnttab.h sys/vfstab.h sys/cdio.h sys/mount.h sys/mntctl.h sys/vfs.h sys/vmount.h fstab.h)
			      


AC_CHECK_FUNCS(setenv unsetenv putenv)





x_libs="`$PKG_CONFIG --libs pangox`"
case x_libs in
  *-lX11*) pango_omitted_x_deps=no ;;
  *)       pango_omitted_x_deps=yes ;;
esac

x_cflags="`$PKG_CONFIG --cflags pangox`"
x_extra_libs=

if test $pango_omitted_x_deps = yes ; then
  AC_PATH_XTRA
 
  if test x$no_x = xyes ; then
    AC_MSG_ERROR([X development libraries not found])
  fi

  x_libs="$X_LIBS -lX11 $X_EXTRA_LIBS"
fi  

## Strip the .la files
 
x_libs_for_checks=$x_libs
#for I in $x_libs ; do
#  case $I in 
#    *.la) ;;
#    *) x_libs_for_checks="$x_libs_for_checks $I" ;;
#  esac
#done

AC_CHECK_LIB(X11, XOpenDisplay, :, 
	AC_MSG_ERROR([*** libX11 not found.  Check 'config.log' for more details.]),
	$x_libs_for_checks) 





AC_PATH_PROG(JW,jw,no)
if test x$JW = xno; then
  HAVE_JW="no"
else
  HAVE_JW="yes"
fi
AM_CONDITIONAL(HAVE_JW, test "x$HAVE_JW" = "xyes")
AC_SUBST(HAVE_JW)





AC_MSG_CHECKING(for libExif)

PKG_CHECK_MODULES(EXIF, libexif > exif_minver, [
    AC_DEFINE(HAVE_EXIF, 1, [Define to enable EXIF support])
    AC_SUBST(EXIF_CFLAGS)
    AC_SUBST(EXIF_LIBS)
  ], [
    PKG_CHECK_MODULES(EXIF, libexif = exif_minver, [
      AC_DEFINE(HAVE_EXIF, 1)
      AC_DEFINE(HAVE_OLD_EXIF, 1, [Define if your EXIF library has old API.])
      AC_SUBST(EXIF_CFLAGS)
      AC_SUBST(EXIF_LIBS)
])])





AC_ARG_ENABLE(more-warnings,
AC_HELP_STRING([--enable-more-warnings], [Maximum compiler warnings]),
set_more_warnings="$enableval",[
if test -f $srcdir/CVSVERSION; then
	is_cvs_version=true
	set_more_warnings=yes
else
	set_more_warnings=no
fi
])
AC_MSG_CHECKING(for more warnings, including -Werror)
if test "$GCC" = "yes" -a "$set_more_warnings" != "no"; then
	AC_MSG_RESULT(yes)
	CFLAGS="\
	-Wall \
	-Wchar-subscripts -Wmissing-declarations -Wmissing-prototypes \
	-Wnested-externs -Wpointer-arith \
	-Wcast-align -Wsign-compare \
	-Werror \
	$CFLAGS"

	for option in -Wno-strict-aliasing -Wno-sign-compare; do
		SAVE_CFLAGS="$CFLAGS"
		CFLAGS="$CFLAGS $option"
		AC_MSG_CHECKING([whether gcc understands $option])
		AC_TRY_COMPILE([], [],
			has_option=yes,
			has_option=no,)
		if test $has_option = no; then
			CFLAGS="$SAVE_CFLAGS"
		fi
		AC_MSG_RESULT($has_option)
		unset has_option
		unset SAVE_CFLAGS
	done
	unset option
else
	AC_MSG_RESULT(no)
fi




GIMPHWRAPBOX_MODULES="gtk+-2.0"
GIMPHWRAPBOX_CFLAGS="`$PKG_CONFIG --cflags $GIMPHWRAPBOX_MODULES`"
AC_SUBST(GIMPHWRAPBOX_CFLAGS)


GSEQUENCE_MODULES="glib-2.0"
GSEQUENCE_CFLAGS="`$PKG_CONFIG --cflags $GSEQUENCE_MODULES`"
AC_SUBST(GSEQUENCE_CFLAGS)
	

LIBEGG_MODULES="gtk+-2.0 libgnome-2.0"
LIBEGG_CFLAGS="`$PKG_CONFIG --cflags $LIBEGG_MODULES`"
AC_SUBST(LIBEGG_CFLAGS)


LIBNAUTILUS_EXTENSION_MODULES="glib-2.0 gtk+-2.0 gnome-vfs-2.0"
LIBNAUTILUS_EXTENSION_CFLAGS="`$PKG_CONFIG --cflags $LIBNAUTILUS_EXTENSION_MODULES`"
AC_SUBST(LIBNAUTILUS_EXTENSION_CFLAGS)
LIBNAUTILUS_EXTENSION_LIBS="`$PKG_CONFIG --libs $LIBNAUTILUS_EXTENSION_MODULES`"
AC_SUBST(LIBNAUTILUS_EXTENSION_LIBS)


CORE_MODULES="eel-2.0 librsvg-2.0 bonobo-activation-2.0 libbonobo-2.0 esound gnome-desktop-2.0 $EXTRA_CORE_MODULES"
CORE_CFLAGS="`$PKG_CONFIG --cflags $CORE_MODULES` $x_cflags"
AC_SUBST(CORE_CFLAGS)
CORE_LIBS="`$PKG_CONFIG --libs $CORE_MODULES` $CDDA_LIBS $LIBJPEG $x_libs"
AC_SUBST(CORE_LIBS)
CORE_IDL_INCLUDES="`$PKG_CONFIG --variable=idldir $CORE_MODULES | $srcdir/add-include-prefix`"
AC_SUBST(CORE_IDL_INCLUDES)

DISABLE_DEPRECATED_CFLAGS=""











AC_SUBST(DISABLE_DEPRECATED_CFLAGS)


PKG_CHECK_MODULES(CAPPLET, "gtk+-2.0 gconf-2.0 libgnomeui-2.0")






AC_PATH_PROG(GCONFTOOL, gconftool-2, no)

if test x"$GCONFTOOL" = xno; then
  AC_MSG_ERROR([gconftool-2 executable not found in your path - should be installed with GConf])
fi

AM_GCONF_SOURCE_2

AC_CONFIG_FILES([
Makefile
cut-n-paste-code/Makefile
cut-n-paste-code/libegg/Makefile
cut-n-paste-code/gsequence/Makefile
cut-n-paste-code/widgets/Makefile
cut-n-paste-code/widgets/gimphwrapbox/Makefile
data/Makefile
data/patterns/Makefile
docs/Makefile
icons/Makefile
icons/crux_eggplant/Makefile
icons/crux_teal/Makefile
icons/default/Makefile
icons/gnome/Makefile
icons/sierra/Makefile
icons/tahoe/Makefile
libbackground/Makefile
libnautilus-private/Makefile
libnautilus-extension/Makefile
libnautilus-extension/libnautilus-extension.pc
nautilus.spec
po/Makefile.in
src/Makefile
src/file-manager/Makefile
test/Makefile
])

AC_OUTPUT


echo "
nautilus-$VERSION:

	prefix:                 ${prefix}
	source code location:	${srcdir}
	compiler:		${CC}

	profiling support:      ${profiling_support}
"
